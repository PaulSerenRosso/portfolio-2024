import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";


// Recreate __dirname in ES Module scope
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const keypointDirectoryPath =  path.resolve(__dirname, "../src/assets/generated/projectsKeypoints");
const overviewDirectoryPath = path.resolve(__dirname, "../src/assets/generated/projectsOverview");
const propsDirectoryPath = path.resolve(__dirname, "../src/assets/generated/props");
const keypointDirectoryName = "projectsKeypoints";
const overviewDirectoryName = "projectsOverview";
const propsDirectoryName = "props";
const keypointOutputPath = path.resolve(__dirname, "../src/utils/generated/projectKeypointImagesImports.js");
const overviewOutputPath = path.resolve(__dirname, "../src/utils/generated/projectOverviewImagesImports.js");
const propsOutputPath = path.resolve(__dirname, "../src/utils/generated/propsImagesImports.js");

const gradientsDirectoryPath = path.resolve(__dirname, "../src/assets/generated/gradients");
const gradientsDirectoryName = "gradients";
const gradientsOutputPath = path.resolve(__dirname, "../src/utils/generated/projectGradientsImagesImports.js");


// Function to generate import statements
function generateImageImports(directoryPath, outputPath, folderName) {
  const images = {};
  const imports =[];
  // Read files in the directory
  const files = fs.readdirSync(directoryPath);


  files.forEach((file) => {

      const [baseName, format] = file.split('.');
      const cleanBaseName = baseName.replace(/[^a-zA-Z0-9]/g, '');
      const formatVariable = format;
      const importVariable = (baseName+formatVariable.replace(/^[a-z]/, c => c.toUpperCase())+"Imported").replace(/^[A-Z]/, c => c.toLowerCase()); // lowercase the first letter if needed;
      imports.push(`import ${importVariable} from "@/assets/generated/${folderName}/${file}";`);


      // If no object for the base name, create it
      if (!images[cleanBaseName]) {
        images[cleanBaseName] = {};
      }

      // Add the resolution to the object
      images[cleanBaseName][formatVariable] = importVariable;

  });

  // Generate the exportable JavaScript code
  let output = `// Auto-generated by generateImages.js\n${imports.join("\n")}\n`;

  Object.keys(images).forEach((key) => {
    output += `export const  ${key.replace(/^[A-Z]/, c => c.toLowerCase())}= {\n`;
    Object.keys(images[key]).forEach((innerKey) => {
      output += `    ${innerKey}: ${images[key][innerKey]},\n`;
    });
    output += `  };\n`;
  });



  // Write the code to a file
  fs.writeFileSync(outputPath, output, 'utf-8');
  console.log('Image imports generated in src/assets/images.js');
}

// Run the function
generateImageImports(keypointDirectoryPath, keypointOutputPath, keypointDirectoryName);
generateImageImports(overviewDirectoryPath, overviewOutputPath, overviewDirectoryName);
generateImageImports(propsDirectoryPath, propsOutputPath, propsDirectoryName);
generateImageImports(gradientsDirectoryPath, gradientsOutputPath, gradientsDirectoryName);
